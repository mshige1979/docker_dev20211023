version: "3"

services:
  # webサーバ
  web:
    # コンテナ名
    container_name: web
    # image
    image: nginx:alpine
    # コンテナの中に入る
    tty: true
    # 他のコンテナ起動後に起動するように制御
    #    depends_on:
    #      - php
    #      - db
    # ポート開放
    ports:
      - 80:80
      - 443:443
  #    # ボリューム
  #    volumes:
  #      - "./nginx/conf.d:/etc/nginx/conf.d"
  #      - "./app:/var/www/html"

  # フロントエンドサーバ(vue)
  frontend:
    # コンテナ名
    container_name: frontend
    # image
    image: node:lts-alpine3.14
    # コンテナの中に入る
    tty: true
    # ボリューム
    volumes:
      - "./projects/frontend:/frontend"
    # WORKDIR
    working_dir: /frontend
    # ポート開放
    ports:
      - 5000:5000

  # バックエンドサーバ(rails)
  backend:
    # コンテナ名
    container_name: backend
    # build
    build:
      context: .
      dockerfile: ./services/backend/Dockerfile
    # コンテナの中に入る
    tty: true
    # 他のコンテナ起動後に起動するように制御
    depends_on:
      - db
    # ボリューム
    volumes:
      - "./projects/backend:/backend"
    # WORKDIR
    working_dir: /backend
    # 環境変数
    environment:
      TZ: "Asia/Tokyo"
      RAILS_ENV: "development"
      DATABASE_HOST: "db"
      DATABASE_NAME: "sample1"
      DATABASE_USER: root
      DATABASE_PASSWORD: password
    # ポート開放
    ports:
      - 3000:3000

  # DBサーバ
  db:
    # コンテナ名
    container_name: pg_db
    # image
    image: mdillon/postgis
    # 環境設定
    environment:
      POSTGRES_DB: sample1
      POSTGRES_USER: root
      POSTGRES_PASSWORD: password
    # コンテナの中に入る
    tty: true
    # ボリューム
    volumes:
      - pg_data:/var/lib/postgresql/data
      - ./services/db/sql:/docker-entrypoint-initdb.d
    # ポート開放
    ports:
      - 5432:5432

# 名前付きボリュームをdockerホストの管理下で作成
volumes:
  pg_data: {}
